@import 'variables';

// We use this to do clear floats
@mixin clearfix {
	&:before, &:after { content: ' '; display: table; }
	&:after { clear: both; }
}

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
	position: absolute !important;
	height: 1px;
	width: 1px;
	overflow: hidden;
	clip: rect(1px, 1px, 1px, 1px);
}

// Turns off the element-invisible effect.
@mixin element-invisible-off {
	position: static !important;
	height: auto;
	width: auto;
	overflow: visible;
	clip: auto;
}

// TODO think how to aggregate media queries in output css file or extract mixins for every breakpoint
@mixin grid-attribute-size($attribute: width, $small-columns-count: 1, $medium-columns-count: 0, $large-columns-count: 0) {
	@if $medium-columns-count == 0 {
		$medium-columns-count: $small-columns-count;
	}

	@if $large-columns-count == 0 {
		$large-columns-count: $small-columns-count;
	}

	#{$attribute}: $large-columns-count * ($large-grid-column + $large-grid-gutter) - $large-grid-gutter;

	@media #{$small-only} {
		#{$attribute}: $small-columns-count * ($small-grid-column + $small-grid-gutter) - $small-grid-gutter;
	}

	@media #{$medium-only} {
		#{$attribute}: $medium-columns-count * ($medium-grid-column + $medium-grid-gutter) - $medium-grid-gutter;
	}
}

// calculate column width in pixels for different screen sizes
// $breakpoint: one of 'small', 'medium', 'large'
@mixin grid-column-width($breakpoint, $columns-count, $aditional-width: 0px) {
	@if $breakpoint == small {
		width: round($columns-count * ($small-grid-column + $small-grid-gutter) - $small-grid-gutter + $aditional-width);
	}

	@if $breakpoint == medium {
		width: round($columns-count * ($medium-grid-column + $medium-grid-gutter) - $medium-grid-gutter + $aditional-width);
	}

	@if $breakpoint == large {
		width: round($columns-count * ($large-grid-column + $large-grid-gutter) - $large-grid-gutter + $aditional-width);
	}
}

@mixin grid-column-max-width($breakpoint, $columns-count, $aditional-width: 0px) {
	@if $breakpoint == small {
		max-width: round($columns-count * ($small-grid-column + $small-grid-gutter) - $small-grid-gutter + $aditional-width);
	}

	@if $breakpoint == medium {
		max-width: round($columns-count * ($medium-grid-column + $medium-grid-gutter) - $medium-grid-gutter + $aditional-width);
	}

	@if $breakpoint == large {
		max-width: round($columns-count * ($large-grid-column + $large-grid-gutter) - $large-grid-gutter + $aditional-width);
	}
}

@mixin grid-position($breakpoint, $columns-count, $position: 'left', $aditional-width: 0px) {
	@if $breakpoint == small {
		#{$position}: round($columns-count * ($small-grid-column + $small-grid-gutter) - $small-grid-gutter + $aditional-width);
	}

	@if $breakpoint == medium {
		#{$position}: round($columns-count * ($medium-grid-column + $medium-grid-gutter) - $medium-grid-gutter + $aditional-width);
	}

	@if $breakpoint == large {
		#{$position}: round($columns-count * ($large-grid-column + $large-grid-gutter) - $large-grid-gutter + $aditional-width);
	}
}

@mixin grid-column-padding() {
	padding-left: $large-grid-column-padding;
	padding-right: $large-grid-column-padding;

	@media #{$medium-only} {
		padding-left: $medium-grid-column-padding;
		padding-right: $medium-grid-column-padding;
	}

	@media #{$small-only} {
		padding-left: $small-grid-column-padding;
		padding-right: $small-grid-column-padding;
	}
}

@mixin grid-content-padding() {
	padding-left: $large-content-padding;
	padding-right: $large-content-padding;

	@media #{$medium-only} {
		padding-left: $medium-content-padding;
		padding-right: $medium-content-padding;
	}

	@media #{$small-only} {
		padding-left: $small-content-padding;
		padding-right: $small-content-padding;
	}
}

@mixin proportional-video-height($width) {
	height: round($width * 9 / 16);
}

@mixin edit-button($radius) {
	background-image: url(base64_string("<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 31 31\" enable-background=\"new 0 0 31 31\" xml:space=\"preserve\"><path d=\"M15.5 0C6.9 0 0 6.9 0 15.5S6.9 31 15.5 31 31 24.1 31 15.5 24.1 0 15.5 0zM7.3 24.4l1.9-4.6 2.7 2.8L7.3 24.4zM13.1 21.4l-2.8-2.8 8.7-8.7 2.8 2.8L13.1 21.4zM23 11.6l-2.8-2.8 2.2-2.2 2.8 2.8L23 11.6z\" fill=\"#{$color-links}\"/></svg>", 'svg'));
	content: ' ';
	display: inline-block;
	height: $radius;
	position: absolute;
	right: 100%;
	width: $radius;
}

@mixin resize-edit-button($radius) {
	height: $radius;
	width: $radius;
}
