<?php
/**
 * ReadableRepresentation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * mobile-applications
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.9-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\MobileApplications\Models;

use \ArrayAccess;

/**
 * ReadableRepresentation Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ReadableRepresentation implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ReadableRepresentation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'resources' => '\Swagger\Client\MobileApplications\Models\EntryStringReadableRepresentation[]',
        'properties' => 'map[string,object]',
        'namespaces' => 'map[string,string]',
        'links' => '\Swagger\Client\MobileApplications\Models\Link[]',
        'resource_link' => '\Swagger\Client\MobileApplications\Models\Link',
        'canonical_links' => '\Swagger\Client\MobileApplications\Models\Link[]',
        'resource_map' => 'map[string,\Swagger\Client\MobileApplications\Models\ReadableRepresentation[]]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'resources' => 'resources',
        'properties' => 'properties',
        'namespaces' => 'namespaces',
        'links' => 'links',
        'resource_link' => 'resourceLink',
        'canonical_links' => 'canonicalLinks',
        'resource_map' => 'resourceMap'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'resources' => 'setResources',
        'properties' => 'setProperties',
        'namespaces' => 'setNamespaces',
        'links' => 'setLinks',
        'resource_link' => 'setResourceLink',
        'canonical_links' => 'setCanonicalLinks',
        'resource_map' => 'setResourceMap'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'resources' => 'getResources',
        'properties' => 'getProperties',
        'namespaces' => 'getNamespaces',
        'links' => 'getLinks',
        'resource_link' => 'getResourceLink',
        'canonical_links' => 'getCanonicalLinks',
        'resource_map' => 'getResourceMap'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['resources'] = isset($data['resources']) ? $data['resources'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['namespaces'] = isset($data['namespaces']) ? $data['namespaces'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['resource_link'] = isset($data['resource_link']) ? $data['resource_link'] : null;
        $this->container['canonical_links'] = isset($data['canonical_links']) ? $data['canonical_links'] : null;
        $this->container['resource_map'] = isset($data['resource_map']) ? $data['resource_map'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets resources
     * @return \Swagger\Client\MobileApplications\Models\EntryStringReadableRepresentation[]
     */
    public function getResources()
    {
        return $this->container['resources'];
    }

    /**
     * Sets resources
     * @param \Swagger\Client\MobileApplications\Models\EntryStringReadableRepresentation[] $resources
     * @return $this
     */
    public function setResources($resources)
    {
        $this->container['resources'] = $resources;

        return $this;
    }

    /**
     * Gets properties
     * @return map[string,object]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     * @param map[string,object] $properties
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets namespaces
     * @return map[string,string]
     */
    public function getNamespaces()
    {
        return $this->container['namespaces'];
    }

    /**
     * Sets namespaces
     * @param map[string,string] $namespaces
     * @return $this
     */
    public function setNamespaces($namespaces)
    {
        $this->container['namespaces'] = $namespaces;

        return $this;
    }

    /**
     * Gets links
     * @return \Swagger\Client\MobileApplications\Models\Link[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     * @param \Swagger\Client\MobileApplications\Models\Link[] $links
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets resource_link
     * @return \Swagger\Client\MobileApplications\Models\Link
     */
    public function getResourceLink()
    {
        return $this->container['resource_link'];
    }

    /**
     * Sets resource_link
     * @param \Swagger\Client\MobileApplications\Models\Link $resource_link
     * @return $this
     */
    public function setResourceLink($resource_link)
    {
        $this->container['resource_link'] = $resource_link;

        return $this;
    }

    /**
     * Gets canonical_links
     * @return \Swagger\Client\MobileApplications\Models\Link[]
     */
    public function getCanonicalLinks()
    {
        return $this->container['canonical_links'];
    }

    /**
     * Sets canonical_links
     * @param \Swagger\Client\MobileApplications\Models\Link[] $canonical_links
     * @return $this
     */
    public function setCanonicalLinks($canonical_links)
    {
        $this->container['canonical_links'] = $canonical_links;

        return $this;
    }

    /**
     * Gets resource_map
     * @return map[string,\Swagger\Client\MobileApplications\Models\ReadableRepresentation[]]
     */
    public function getResourceMap()
    {
        return $this->container['resource_map'];
    }

    /**
     * Sets resource_map
     * @param map[string,\Swagger\Client\MobileApplications\Models\ReadableRepresentation[]] $resource_map
     * @return $this
     */
    public function setResourceMap($resource_map)
    {
        $this->container['resource_map'] = $resource_map;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


