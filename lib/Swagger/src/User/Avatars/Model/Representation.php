<?php
/**
 * Representation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Representation Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Representation implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'namespaces' => 'map[string,string]',
        'links' => '\Swagger\Client\Model\Link[]',
        'resource_link' => '\Swagger\Client\Model\Link',
        'canonical_links' => '\Swagger\Client\Model\Link[]',
        'resource_map' => 'map[string,\Swagger\Client\Model\List]',
        'resources' => '\Swagger\Client\Model\Entry[]',
        'properties' => 'map[string,object]'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'namespaces' => 'namespaces',
        'links' => 'links',
        'resource_link' => 'resourceLink',
        'canonical_links' => 'canonicalLinks',
        'resource_map' => 'resourceMap',
        'resources' => 'resources',
        'properties' => 'properties'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'namespaces' => 'setNamespaces',
        'links' => 'setLinks',
        'resource_link' => 'setResourceLink',
        'canonical_links' => 'setCanonicalLinks',
        'resource_map' => 'setResourceMap',
        'resources' => 'setResources',
        'properties' => 'setProperties'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'namespaces' => 'getNamespaces',
        'links' => 'getLinks',
        'resource_link' => 'getResourceLink',
        'canonical_links' => 'getCanonicalLinks',
        'resource_map' => 'getResourceMap',
        'resources' => 'getResources',
        'properties' => 'getProperties'
    );
  
    
    /**
      * $namespaces 
      * @var map[string,string]
      */
    protected $namespaces;
    
    /**
      * $links 
      * @var \Swagger\Client\Model\Link[]
      */
    protected $links;
    
    /**
      * $resource_link 
      * @var \Swagger\Client\Model\Link
      */
    protected $resource_link;
    
    /**
      * $canonical_links 
      * @var \Swagger\Client\Model\Link[]
      */
    protected $canonical_links;
    
    /**
      * $resource_map 
      * @var map[string,\Swagger\Client\Model\List]
      */
    protected $resource_map;
    
    /**
      * $resources 
      * @var \Swagger\Client\Model\Entry[]
      */
    protected $resources;
    
    /**
      * $properties 
      * @var map[string,object]
      */
    protected $properties;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->namespaces = $data["namespaces"];
            $this->links = $data["links"];
            $this->resource_link = $data["resource_link"];
            $this->canonical_links = $data["canonical_links"];
            $this->resource_map = $data["resource_map"];
            $this->resources = $data["resources"];
            $this->properties = $data["properties"];
        }
    }
    
    /**
     * Gets namespaces
     * @return map[string,string]
     */
    public function getNamespaces()
    {
        return $this->namespaces;
    }
  
    /**
     * Sets namespaces
     * @param map[string,string] $namespaces 
     * @return $this
     */
    public function setNamespaces($namespaces)
    {
        
        $this->namespaces = $namespaces;
        return $this;
    }
    
    /**
     * Gets links
     * @return \Swagger\Client\Model\Link[]
     */
    public function getLinks()
    {
        return $this->links;
    }
  
    /**
     * Sets links
     * @param \Swagger\Client\Model\Link[] $links 
     * @return $this
     */
    public function setLinks($links)
    {
        
        $this->links = $links;
        return $this;
    }
    
    /**
     * Gets resource_link
     * @return \Swagger\Client\Model\Link
     */
    public function getResourceLink()
    {
        return $this->resource_link;
    }
  
    /**
     * Sets resource_link
     * @param \Swagger\Client\Model\Link $resource_link 
     * @return $this
     */
    public function setResourceLink($resource_link)
    {
        
        $this->resource_link = $resource_link;
        return $this;
    }
    
    /**
     * Gets canonical_links
     * @return \Swagger\Client\Model\Link[]
     */
    public function getCanonicalLinks()
    {
        return $this->canonical_links;
    }
  
    /**
     * Sets canonical_links
     * @param \Swagger\Client\Model\Link[] $canonical_links 
     * @return $this
     */
    public function setCanonicalLinks($canonical_links)
    {
        
        $this->canonical_links = $canonical_links;
        return $this;
    }
    
    /**
     * Gets resource_map
     * @return map[string,\Swagger\Client\Model\List]
     */
    public function getResourceMap()
    {
        return $this->resource_map;
    }
  
    /**
     * Sets resource_map
     * @param map[string,\Swagger\Client\Model\List] $resource_map 
     * @return $this
     */
    public function setResourceMap($resource_map)
    {
        
        $this->resource_map = $resource_map;
        return $this;
    }
    
    /**
     * Gets resources
     * @return \Swagger\Client\Model\Entry[]
     */
    public function getResources()
    {
        return $this->resources;
    }
  
    /**
     * Sets resources
     * @param \Swagger\Client\Model\Entry[] $resources 
     * @return $this
     */
    public function setResources($resources)
    {
        
        $this->resources = $resources;
        return $this;
    }
    
    /**
     * Gets properties
     * @return map[string,object]
     */
    public function getProperties()
    {
        return $this->properties;
    }
  
    /**
     * Sets properties
     * @param map[string,object] $properties 
     * @return $this
     */
    public function setProperties($properties)
    {
        
        $this->properties = $properties;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
